{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fdb7b42a",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-10-24T10:33:00.703227Z",
     "iopub.status.busy": "2025-10-24T10:33:00.702658Z",
     "iopub.status.idle": "2025-10-24T10:33:00.708355Z",
     "shell.execute_reply": "2025-10-24T10:33:00.707256Z",
     "shell.execute_reply.started": "2025-10-24T10:33:00.703201Z"
    },
    "papermill": {
     "duration": 0.002967,
     "end_time": "2025-10-24T10:48:05.013356",
     "exception": false,
     "start_time": "2025-10-24T10:48:05.010389",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# üß† Base-Learn Tutorial: Exploring Solidity Contracts  \n",
    "_Educational guide for learning Solidity using the Base-Learn dataset._\n",
    "\n",
    "Welcome to the **Base-Learn Tutorial**, a hands-on walkthrough that helps developers  \n",
    "understand smart contract structures using educational examples from the **Base blockchain** ecosystem.\n",
    "\n",
    "By the end of this tutorial, you will:\n",
    "- üìò Explore dataset contents  \n",
    "- üß© Read Solidity contract files  \n",
    "- ‚ö° Learn how contracts are structured and documented  \n",
    "- üß† Get insights for Web3 learning and experimentation\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "883b6e1e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-24T10:48:05.020179Z",
     "iopub.status.busy": "2025-10-24T10:48:05.019738Z",
     "iopub.status.idle": "2025-10-24T10:48:05.041676Z",
     "shell.execute_reply": "2025-10-24T10:48:05.040383Z"
    },
    "papermill": {
     "duration": 0.027048,
     "end_time": "2025-10-24T10:48:05.043442",
     "exception": false,
     "start_time": "2025-10-24T10:48:05.016394",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "### üìÅ Found 16 files in Base-Learn dataset"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AddressBook.sol\n",
      "Arrays\n",
      "Control Structures\n",
      "Deploying to a Testnet\n",
      "ERC20\n",
      "ERC721\n",
      "Error\n",
      "Import\n",
      "Inheritance\n",
      "Minimal\n",
      "README.md\n",
      "SillyStringUtils.sol\n",
      "Storage in Solidity\n",
      "Structs\n",
      "The Mapping Type\n",
      "The New Keyword Other Contract\n"
     ]
    }
   ],
   "source": [
    "from pathlib import Path\n",
    "from IPython.display import Markdown, display\n",
    "\n",
    "# Define dataset path\n",
    "INPUT_ROOT = Path('/kaggle/input/base-learn')\n",
    "\n",
    "# Check available files\n",
    "files = sorted(INPUT_ROOT.rglob('*'))\n",
    "display(Markdown(f\"### üìÅ Found {len(files)} files in Base-Learn dataset\"))\n",
    "for f in files[:25]:\n",
    "    print(f.relative_to(INPUT_ROOT))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e92f85c",
   "metadata": {
    "papermill": {
     "duration": 0.002343,
     "end_time": "2025-10-24T10:48:05.048587",
     "exception": false,
     "start_time": "2025-10-24T10:48:05.046244",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## üìÑ Step 1: Read the Documentation (README.md)\n",
    "\n",
    "Let‚Äôs begin by opening and previewing the **README.md** file.  \n",
    "This file usually contains a description of the dataset structure,  \n",
    "usage examples, and notes about each Solidity contract.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5dc97a89",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-24T10:48:05.055294Z",
     "iopub.status.busy": "2025-10-24T10:48:05.054884Z",
     "iopub.status.idle": "2025-10-24T10:48:05.067438Z",
     "shell.execute_reply": "2025-10-24T10:48:05.066378Z"
    },
    "papermill": {
     "duration": 0.017964,
     "end_time": "2025-10-24T10:48:05.069101",
     "exception": false,
     "start_time": "2025-10-24T10:48:05.051137",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "### üìù README.md Preview"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# Base-Learn\n",
      "Educational docs inspired by Base Learn\n",
      "# üß† Learn to Build Smart Contracts and Onchain Apps on Base Sepolia\n",
      "\n",
      "Welcome to **Base-Learn** ‚Äî a step-by-step, hands-on tutorial to build, deploy, and interact with smart contracts using **Remix IDE** and the **Base Sepolia testnet**. Follow the lessons in order; each step links directly to the file in this repository so you can open, copy, and run the code in Remix.\n",
      "\n",
      "---\n",
      "\n",
      "## üíß Base Sepolia Faucet Links\n",
      "\n",
      "Before starting, make sure you have test ETH for the **Base Sepolia** network. You‚Äôll need it to deploy contracts and interact via Remix.\n",
      "\n",
      "Claim free Base Sepolia ETH from one of these trusted faucets:\n",
      "\n",
      "1. [Alchemy Base Sepolia Faucet](https://www.alchemy.com/faucets/base-sepolia)\n",
      "2. [Chainstack Faucet](https://faucet.chainstack.com/)\n",
      "3. [Optimism Console Faucet](https://console.optimism.io/faucet)\n",
      "\n",
      "---\n",
      "\n",
      "## üîÅ How to use this tutorial (quick)\n",
      "\n",
      "1. Open Remix: [https://remix.ethereum.org](https://remix.ethereum.org)\n",
      "2. Click the file link in the step below to open the source on GitHub.\n",
      "3. Copy the contract code from GitHub and paste a new file in Remix (create a file with the same name).\n",
      "4. Compile in Remix, connect MetaMask (set \n"
     ]
    }
   ],
   "source": [
    "readme_path = INPUT_ROOT / \"README.md\"\n",
    "if readme_path.exists():\n",
    "    text = readme_path.read_text(encoding='utf-8')\n",
    "    display(Markdown(\"### üìù README.md Preview\"))\n",
    "    print(text[:1200])\n",
    "else:\n",
    "    print(\"‚ùå README.md not found.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91770daa",
   "metadata": {
    "papermill": {
     "duration": 0.002425,
     "end_time": "2025-10-24T10:48:05.074381",
     "exception": false,
     "start_time": "2025-10-24T10:48:05.071956",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## üí† Step 2: Exploring Solidity Files\n",
    "\n",
    "Now, let‚Äôs look at some Solidity files from the dataset.  \n",
    "We‚Äôll display the file names, count them, and preview the contents of one sample file.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fcbcd3d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-24T10:48:05.081057Z",
     "iopub.status.busy": "2025-10-24T10:48:05.080730Z",
     "iopub.status.idle": "2025-10-24T10:48:05.094137Z",
     "shell.execute_reply": "2025-10-24T10:48:05.093055Z"
    },
    "papermill": {
     "duration": 0.018711,
     "end_time": "2025-10-24T10:48:05.095717",
     "exception": false,
     "start_time": "2025-10-24T10:48:05.077006",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "üìú Found 2 Solidity files.\n",
      "\n",
      "- AddressBook.sol\n",
      "- SillyStringUtils.sol\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "### Preview: `AddressBook.sol`"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "// SPDX-License-Identifier: MIT\n",
      "pragma solidity ^0.8.30;\n",
      "\n",
      "import \"@openzeppelin/contracts/access/Ownable.sol\";\n",
      "\n",
      "contract AddressBook is Ownable(msg.sender) {\n",
      "    // Define a private salt value for internal use\n",
      "    string private salt = \"value\"; \n",
      "\n",
      "    // Define a struct to represent a contact\n",
      "    struct Contact {\n",
      "        uint id; // Unique identifier for the contact\n",
      "        string firstName; // First name of the contact\n",
      "        string lastName; // Last name of the contact\n",
      "        uint[] phoneNumbers; // Array to store multiple phone numbers for the contact\n",
      "    }\n",
      "\n",
      "    // Array to store all contacts\n",
      "    Contact[] private contacts;\n",
      "\n",
      "    // Mapping to store the index of each contact in the contacts array using its ID\n",
      "    mapping(uint => uint) private idToIndex;\n",
      "\n",
      "    // Variable to keep track of the ID for the next contact\n",
      "    uint private nextId = 1;\n",
      "\n",
      "    // Custom error for when a contact is not found\n",
      "    error ContactNotFound(uint id);\n",
      "\n",
      "    // Function to add a new contact\n",
      "    function ad\n"
     ]
    }
   ],
   "source": [
    "sol_files = sorted([p for p in INPUT_ROOT.rglob('*.sol')])\n",
    "print(f\"üìú Found {len(sol_files)} Solidity files.\\n\")\n",
    "\n",
    "for s in sol_files[:10]:\n",
    "    print(\"-\", s.relative_to(INPUT_ROOT))\n",
    "\n",
    "# Preview first Solidity file\n",
    "if sol_files:\n",
    "    sample = sol_files[0]\n",
    "    display(Markdown(f\"### Preview: `{sample.name}`\"))\n",
    "    text = sample.read_text(encoding='utf-8', errors='ignore')\n",
    "    print(text[:1000])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10798aa5",
   "metadata": {
    "papermill": {
     "duration": 0.003121,
     "end_time": "2025-10-24T10:48:05.102142",
     "exception": false,
     "start_time": "2025-10-24T10:48:05.099021",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## üîç Step 3: Analyze Contract Structure\n",
    "\n",
    "Let‚Äôs perform a quick analysis on the Solidity code ‚Äî  \n",
    "counting functions, comments, and structure to understand the coding style.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "544ed74e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-24T10:48:05.109141Z",
     "iopub.status.busy": "2025-10-24T10:48:05.108857Z",
     "iopub.status.idle": "2025-10-24T10:48:05.116219Z",
     "shell.execute_reply": "2025-10-24T10:48:05.114999Z"
    },
    "papermill": {
     "duration": 0.013076,
     "end_time": "2025-10-24T10:48:05.118091",
     "exception": false,
     "start_time": "2025-10-24T10:48:05.105015",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "üîß Contract Analysis Report\n",
      "- Total lines: 72\n",
      "- Functions found: 4\n",
      "- Comments found: 28\n",
      "\n",
      "üß© Function list:\n",
      "- function addContact\n",
      "- function deleteContact\n",
      "- function getContact\n",
      "- function getAllContacts\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "if sol_files:\n",
    "    code = sample.read_text(encoding='utf-8', errors='ignore')\n",
    "    functions = re.findall(r'function\\s+\\w+', code)\n",
    "    comments = re.findall(r'//.*|/\\*[\\s\\S]*?\\*/', code)\n",
    "\n",
    "    print(\"üîß Contract Analysis Report\")\n",
    "    print(f\"- Total lines: {len(code.splitlines())}\")\n",
    "    print(f\"- Functions found: {len(functions)}\")\n",
    "    print(f\"- Comments found: {len(comments)}\")\n",
    "\n",
    "    if functions:\n",
    "        print(\"\\nüß© Function list:\")\n",
    "        for fn in functions[:10]:\n",
    "            print(\"-\", fn)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f4b2a85",
   "metadata": {
    "papermill": {
     "duration": 0.002711,
     "end_time": "2025-10-24T10:48:05.124082",
     "exception": false,
     "start_time": "2025-10-24T10:48:05.121371",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---\n",
    "\n",
    "## ‚úÖ Summary & Next Steps\n",
    "\n",
    "üéâ Congratulations! You‚Äôve successfully explored the **Base-Learn** dataset and analyzed smart contract examples.\n",
    "\n",
    "### What We Learned:\n",
    "- How to read documentation from a Web3 educational dataset  \n",
    "- How Solidity contracts are structured (functions, comments, files)  \n",
    "- How to extract insights for learning and research  \n",
    "\n",
    "### Next Steps:\n",
    "- üî¨ Compare multiple contracts (ERC20 vs ERC721)  \n",
    "- üìä Add visualizations for contract size or complexity  \n",
    "- üß† Extend this notebook into a Web3 learning resource for Base ecosystem\n",
    "\n",
    "---\n",
    "\n",
    "> _Built with ‚ù§Ô∏è by **Fauzan Hidayatulloh (cruzl.eth)** ‚Äî for open blockchain education._\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 8562352,
     "sourceId": 13486424,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31153,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5.995611,
   "end_time": "2025-10-24T10:48:05.546945",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-10-24T10:47:59.551334",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
